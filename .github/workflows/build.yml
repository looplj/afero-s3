name: Build

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  release:
    types: [published]
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    services:
      minio:
        image: lazybit/minio:latest
        ports:
          - 9000:9000
        env:
          MINIO_ACCESS_KEY: minioadmin
          MINIO_SECRET_KEY: minioadmin

    strategy:
      matrix:
        go: [1.24.*]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
          version: latest

          # Optional: working directory, useful for monorepos
          working-directory: ./

          # Optional: golangci-lint command line arguments.
          args: --timeout 10m --max-same-issues 50

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true then the action will use pre-installed Go.
          # skip-go-installation: true

          # Optional: if set to true then the action don't cache or restore ~/go/pkg.
          # skip-pkg-cache: true

          # Optional: if set to true then the action don't cache or restore ~/.cache/go-build.
          # skip-build-cache: true

          # optionally use a specific version of Go rather than the latest one
          # go-version: '1.24.7'

      - name: Test
        # We need GCC because of the "go test -race"
        env:
          CGO_ENABLED: 1
        run: make run-test-without-coverage

  # For github to have a unique status check name
  status:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - run: echo 'All good'
